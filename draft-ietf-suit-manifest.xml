<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-manifest-05" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2020" month="May" day="27"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest. Firmware updates and secure boot
both tend to use sequences of common operations, so the manifest encodes
those sequences of operations, rather than declaring the metadata. The
manifest also serves as a building block for secure boot.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="I-D.ietf-suit-architecture"/> and the threats, requirements, and user stories in <xref target="I-D.ietf-suit-information-model"/>.</t>

<t>A core concept of the SUIT manifest specification are commands. Commands are either conditions or directives used to define the required behavior. Conceptually, a sequence of commands is like a script but the used language is tailored to software updates and secure boot.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to heavily optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and secure boot use cases, there is nothing in the <xref target="I-D.ietf-suit-information-model"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications in a Trusted Execution Environment (TEE), see <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>The following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic information protecting the manifest.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper, authorization information, and severed fields.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives a manifest.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
  <t>A/B images: Dividing a device’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
</list></t>

</section>
<section anchor="how-to-use-this-document" title="How to use this Document">

<t>This specification covers four aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="interpreter-behavior"/> describes what actions a manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a manifest.</t>
  <t><xref target="manifest-structure"/> specifies the content of the manifest and the envelope.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="manifest-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="manifest-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in Appendix A, examples are given in Appendix B and a design rational is offered in Appendix C. Finally, Appendix D gives a summarize of the mandatory-to-implement features of this specification.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing firmware updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="I-D.ietf-suit-architecture"/>. The security aspects are described in <xref target="I-D.ietf-suit-information-model"/>.</t>

<section anchor="iot-firmware-update-constraints" title="IoT Firmware Update Constraints">

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of urequirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivery to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="update-workflow-model" title="Update Workflow Model">

<t>There are several fundamental assumptions that inform the model of the firmware update workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependency manifests should be present before any payload is fetched.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the secure boot workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependencies and payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a device installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Resolve dependencies.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader must also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a MAC, to the manifest in order to prevent further verifications.</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
</section>
<section anchor="severed-fields" title="Severed Fields">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed without affecting later stages of the lifecycle. This is called “Severing.” Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring authenticity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 should never be severable. Elements larger than (Digest Bits)/8 + 4 may be severable, while elements that are much larger than (Digest Bits)/8 + 4 should be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
<section anchor="interpreter-behavior" title="Interpreter Behavior">

<t>This section describes the behavior of the manifest interpreter and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the interpreter: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Interpreter Setup">

<t>Prior to executing any command sequence, the interpreter or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the interpreter or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the interpreter can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported component ID encountered.</t>
  <t>Payload not available.</t>
  <t>Dependency not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Dependency or Payload verification failed.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Following these initial tests, the interpreter clears all parameter storage. This ensures that the interpreter begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a device receives an incompatible manifest.</t>

<t>A device MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if 
- it expects to receive many incompatible manifests, and 
- it has power budget that makes signature verification undesirable.</t>

<t>The guidelines in <xref target="creating-manifests">Creating Manifests</xref> require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST result in an error.</t>

<t>Once a valid, authentic manifest has been selected, the interpreter MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component ID is supported.</t>

<t>For each listed component, the interpreter MUST provide storage for the supported parameters. If the interpreter does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The interpreter SHOULD check that the common section contains at least one vendor ID check and at least one class ID check.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Current Component command.</t>

<t>If a dependency is specified, then the interpreter MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter Fundamental Properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a secure boot MUST either result in an error, or a booted system.</t>
  <t>Executing the same manifest on multiple devices MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior" title="Abstract Machine Description">

<t>The heart of the manifest is the list of commands, which are processed by an interpreter. This interpreter can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by a Component Index, i.e. arrays of binary strings.</t>

<t>The following table describes the behavior of each command. “params” represents the parameters for the current component or dependency.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>binary-match(component, params[vendor-id])</c>
      <c>Check Class Identifier</c>
      <c>binary-match(component, params[class-id])</c>
      <c>Verify Image</c>
      <c>binary-match(digest(component), params[digest])</c>
      <c>Set Component Index</c>
      <c>component := components[arg]</c>
      <c>Override Parameters</c>
      <c>params[k] := v for k,v in arg</c>
      <c>Set Dependency Index</c>
      <c>dependency := dependencies[arg]</c>
      <c>Set Parameters</c>
      <c>params[k] := v if not k in params for k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(dependency[common]); exec(dependency[current-segment])</c>
      <c>Run</c>
      <c>run(component)</c>
      <c>Fetch</c>
      <c>store(component, fetch(params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Offset</c>
      <c>assert(offsetof(component) == arg)</c>
      <c>Check Device Identifier</c>
      <c>binary-match(component, params[device-id])</c>
      <c>Check Image Not Match</c>
      <c>not binary-match(digest(component), params[digest])</c>
      <c>Check Minimum Battery</c>
      <c>assert(battery &gt;= arg)</c>
      <c>Check Update Authorized</c>
      <c>assert(isAuthorized())</c>
      <c>Check Version</c>
      <c>assert(version_check(component, arg))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>break if exec(seq) is not error for seq in arg</c>
      <c>Copy</c>
      <c>store(component, params[src-component])</c>
      <c>Swap</c>
      <c>swap(component, params[src-component])</c>
      <c>Wait For Event</c>
      <c>until event(arg), wait</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(component, arg)</c>
</texttable>

</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>Because each manifest has a list of components and a list of components defined by its dependencies, it is possible for the manifest processor to handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

</section>
<section anchor="parallel-processing-interpreter" title="Parallel Processing Interpreter">

<t>Advanced devices may make use of the Strict Order parameter and enable parallel processing of some segments, or it may reorder some segments. To perform parallel processing, once the Strict Order parameter is set to False, the device may fork a process for each command until the Strict Order parameter is returned to True or the command sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the device consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing must halt:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Dependency Index.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, sequences of commands may be collected in a suit-directive-run-sequence. Then, each of these sequences may be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence must declare a single target component. Set Component Index is not permitted inside this sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>NOTE: On systems that support only a single component, Set Current Component has no effect and can be omitted.</t>

<t>NOTE: A digest should always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</t>

<section anchor="compatibility-check-template" title="Compatibility Check Template">

<t>The compatibility check ensures that devices only install compatible images.
In this template all information is contained in the common block and the following sequence of operations are used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="identifiers"/>)</t>
  <t>Check Class Identifier condication (see <xref target="identifiers"/>)</t>
</list></t>

</section>
<section anchor="secure-boot-template" title="Secure Boot Template">

<t>This template performs a secure boot operation.</t>

<t>The following operations are placed into the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the run block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

<t>According to <xref target="command-behavior"/>, the Run directive applies to the component referenced by the current Component Index. Hence, the Set Component Index directive has to be used to target a specific component.</t>

</section>
<section anchor="firmware-download-template" title="Firmware Download Template">

<t>This template triggers the download of firmware.</t>

<t>The following operations are placed into the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="secparameters"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="load-from-external-storage-template" title="Load from External Storage Template">

<t>This directive loads an firmware image from external storage.</t>

<t>The following operations are placed into the load block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Component Index (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="load-decompress-from-external-storage-template" title="Load &amp; Decompress from External Storage Template">

<t>The following operations are placed into the load block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Component Index and Compression Info (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>This example is similar to the previous case but additionally performs decompression. Hence, the only difference is in setting the Compression Info parameter.</t>

</section>
<section anchor="dependency-template" title="Dependency Template">

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="secparameters"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

</section>
</section>
<section anchor="envelope" title="Envelope">

<t>The diagram below shows high-level structure of the SUIT manifest 
embedded in the envelope, the top-level structure.</t>

<figure><artwork><![CDATA[
+------------------------+
| Envelope               |
+------------------------+
| Delegation Info        |
| Authentication Wrapper |
| Plaintext or      -+---------> +----------------------------+
| Encrypted Manifest-+   |       | Manifest                   |
| Severable Fields       |       +----------------------------+
| Human-Readable Text    |       | Version                    |
| COSWID                 |       | Sequence Number            |
+------------------------+  +----- Common Structure           |
                            | +--- Commands                   |
                            | |  | Digest of Enveloped Fields |
+-----------------------+   | |  | Reference to Full Manifest |
| Common Structure      | <-+ |  +----------------------------+
+-----------------------+     |
| Dependencies          |     +->+-----------------------+
| Components IDs        |     +->| Commands              |
| Component References  |     |  +-----------------------+
| Common Commands ------------+  | List of ( pairs of (  |
+-----------------------+        |   * command code      |
                                 |   * argument          |
                                 | ))                    |
                                 +-----------------------
]]></artwork></figure>

<section anchor="authenticated-manifests" title="Authenticated Manifests">

<t>The suit-authentication-wrapper contains a list of 1 or more cryptographic authentication wrappers for the core part of the manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. Each of these blocks contains a SUIT_Digest of the manifest. This enables modular processing of the manifest. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/>. The suit-authentication-wrapper MUST come before any element in the SUIT_Envelope, except for the OPTIONAL suit-delegation, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Envelope that begins with any element other than a suit-authentication-wrapper or suit-delegation.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be nil.</t>

<t>For manifests that are only authenticated the envelope MUST contain the plaintext manifest in SUIT_Manifest structure.</t>

</section>
<section anchor="encrypted-manifests" title="Encrypted Manifests">

<t>For encrypted manifest both a SUIT_Encryption_Wrapper and the ciphertext of a manifest is included in the envelope.</t>

<t>When the envelope contains the SUIT_Encryption_Wrapper, the suit-authentication-wrapper MUST authenticate the plaintext of suit-manifest-encrypted. This ensures that the manifest can be stored decrypted and that a recipient MAY convert the suit-manifest-encrypted element to a suit-manifest element.</t>

<t>The SUIT_Manifest structure describes the payload(s) to be installed and any dependencies on other manifests.</t>

<t>The suit-manifest-encryption-info structure contains information required to decrypt a ciphertext manifest and the suit-manifest-encrypted structure contains the ciphertext.</t>

</section>
<section anchor="delegation-info" title="Delegation Info">

<t>The suit-delegation field may carry one or multiple CBOR Web Tokens (CWTs). They can be used to perform enhanced authorization decisions.</t>

</section>
<section anchor="severable-fields" title="Severable Fields">

<t>Each of suit-dependency-resolution, suit-payload-fetch, and suit-payload-installation contain the severable contents of the identically named portions of the manifest, described in <xref target="manifest-structure"/>.</t>

</section>
<section anchor="human-readable-text" title="Human-Readable Text">

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s).</t>

</section>
<section anchor="coswid" title="COSWID">

<t>suit-coswid contains a Concise Software Identifier. This may be discarded by the Recipient if not needed.</t>

</section>
<section anchor="encoding-considerations" title="Encoding Considerations">

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

</section>
<section anchor="suitenvelope-cddl" title="SUIT_Envelope CDDL">

<t>CDDL names are hyphenated and CDDL structures follow the convention adopted in COSE <xref target="RFC8152"/>: SUIT_Structure_Name.</t>

<t>The CDDL that describes the envelope is below.</t>

<figure><artwork><![CDATA[
SUIT_Envelope = {
    suit-delegation            => bstr .cbor SUIT_Delegation
    suit-authentication-wrapper
        => bstr .cbor SUIT_Authentication_Wrapper / nil,
    $$SUIT_Manifest_Wrapped,
    * $$SUIT_Severed_Fields,
}

SUIT_Delegation = [ + [ + CWT ] ]

SUIT_Authentication_Wrapper = [ + bstr .cbor SUIT_Authentication_Block ]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

$$SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
$$SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)

SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

$$SUIT_Severed_Fields //= ( suit-dependency-resolution =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-payload-fetch =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-install =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-text =>
    bstr .cbor SUIT_Text_Map)
$$SUIT_Severed_Fields //= (suit-coswid =>
    bstr .cbor concise-software-identity)
]]></artwork></figure>

</section>
</section>
<section anchor="manifest-structure" title="Manifest">

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>a list of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>a digest of human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
  <t>a digest of the Concise Software Identifier found in the SUIT_Envelope (see <xref target="manifest-digest-coswid"/>)</t>
</list></t>

<t>Several fields in the Manifest can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope.</t>

<section anchor="manifest-version" title="suit-manifest-version">

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr" title="suit-manifest-sequence-number">

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps devices to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-common" title="suit-common">

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, suit-dependency-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of SUIT_Dependency blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>In order to distinguish between components that are affected by the current manifest and components that are affected by a dependency, they are kept in separate lists. Components affected by the current manifest only list the component identifier. Components affected by a dependency include the component identifier and the index of the dependency that defines the component.</t>

<t>suit-components is a list of SUIT_Component blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is OPTIONAL to implement, but at least one manifest MUST contain a suit-components block.</t>

<t>suit-dependency-components is a list of SUIT_Component_Reference blocks that specify component identifiers that will be affected by the content of a dependency of the current manifest. suit-dependency-components is OPTIONAL to implement.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected device identity and image digests when they are conditional (see <xref target="secconditional"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement.</t>

</section>
<section anchor="manifest-reference-uri" title="suit-reference-uri">

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a device after installation.</t>

</section>
<section anchor="manifest-commands" title="SUIT_Command_Sequence">

<t>suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED to implement and to use when suit-dependencies is present.</t>

<t>suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>

<t>suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>

<t>suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED to implement. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>

<t>suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>

<t>suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL to implement. Only one manifest in an update may contain the “run” directive.</t>

</section>
<section anchor="manifest-digest-text" title="suit-text">

<t>suit-text is a digest that uniquely identifies the content of the Text that is packaged in the SUIT_Envelope. suit-text is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-digest-coswid" title="suit-coswid">

<t>suit-coswid is a digest that uniquely identifies the content of the concise-software-identifier that is packaged in the SUIT_Envelope. suit-coswid is OPTIONAL to implement.</t>

</section>
<section anchor="suitmanifest-cddl" title="SUIT_Manifest CDDL">

<t>The following CDDL fragment defines the manifest.</t>

<figure><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => #6.32(tstr),
    * $$SUIT_Severable_Command_Sequences,
    * $$SUIT_Command_Sequences,
    * $$SUIT_Protected_Elements,
}

$$SUIT_Severable_Command_Sequences //= (suit-dependency-resolution =>
    SUIT_Severable_Command_Segment)
$$SUIT_Severable_Command_Segments //= (suit-payload-fetch =>
    SUIT_Severable_Command_Sequence)
$$SUIT_Severable_Command_Segments //= (suit-install =>
    SUIT_Severable_Command_Sequence)

SUIT_Severable_Command_Sequence =
    SUIT_Digest / bstr .cbor SUIT_Command_Sequence

$$SUIT_Command_Sequences //= ( suit-validate =>
    bstr .cbor SUIT_Command_Sequence )
$$SUIT_Command_Sequences //= ( suit-load =>
    bstr .cbor SUIT_Command_Sequence )
$$SUIT_Command_Sequences //= ( suit-run =>
    bstr .cbor SUIT_Command_Sequence )

$$SUIT_Protected_Elements //= ( suit-text => SUIT_Digest )
$$SUIT_Protected_Elements //= ( suit-coswid => SUIT_Digest )

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor SUIT_Dependencies,
    ? suit-components             => bstr .cbor SUIT_Components,
    ? suit-dependency-components
        => bstr .cbor SUIT_Component_References,
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}
]]></artwork></figure>

</section>
<section anchor="SUIT_Dependency" title="Dependencies">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest.</t>

<t>The following CDDL describes the SUIT_Dependency structure.</t>

<figure><artwork><![CDATA[
SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
}
]]></artwork></figure>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This means that a digest may need to be calculated more than once, however this is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier. This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent devices without those devices needing consistent component hierarchy. This element is OPTIONAL.</t>

</section>
<section anchor="suitcomponentreference" title="SUIT_Component_Reference">

<t>The SUIT_Component_Reference describes an image that is defined by another manifest. This is useful for overriding the behavior of another manifest, for example by directing the recipient to look at a different URI for the image or by changing the expected format, such as when a gateway performs decryption on behalf of a constrained device. The following CDDL describes the SUIT_Component_Reference.</t>

<figure><artwork><![CDATA[
SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}
]]></artwork></figure>

</section>
<section anchor="secparameters" title="Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Use Before</c>
      <c>suit-parameter-use-before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-parameter-component-offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>Encryption Info</c>
      <c>suit-parameter-encryption-info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>Compression Info</c>
      <c>suit-parameter-compression-info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>Unpack Info</c>
      <c>suit-parameter-unpack-info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Minimum Battery</c>
      <c>suit-parameter-minimum-battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>Update Priority</c>
      <c>suit-parameter-update-priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>Version</c>
      <c>suit-parameter-version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>Wait Info</c>
      <c>suit-parameter-wait-info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>URI List</c>
      <c>suit-parameter-uri-list</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately</t>

<section anchor="suit-parameter-vendor-identifier" title="suit-parameter-vendor-identifier">

<t>A RFC 4122 UUID representing the vendor of the device or component.</t>

</section>
<section anchor="suit-parameter-class-identifier" title="suit-parameter-class-identifier">

<t>A RFC 4122 UUID representing the class of the device or component</t>

</section>
<section anchor="suit-parameter-image-digest" title="suit-parameter-image-digest">

<t>A fingerprint computed over the image itself encoded in the SUIT_Digest structure.</t>

</section>
<section anchor="suit-parameter-image-size" title="suit-parameter-image-size">

<t>The size of the firmware image in bytes.</t>

</section>
<section anchor="suit-parameter-use-before" title="suit-parameter-use-before">

<t>An expire date for the use of the manifest encoded as a POSIX timestamp.</t>

</section>
<section anchor="suit-parameter-component-offset" title="suit-parameter-component-offset">

<t>Offset of the component</t>

</section>
<section anchor="suit-parameter-encryption-info" title="suit-parameter-encryption-info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr.</t>

</section>
<section anchor="suit-parameter-compression-info" title="suit-parameter-compression-info">

<t>Compression Info defines any information that is required for a device to perform decompression operations. Typically, this includes the algorithm identifier. This document defines the use of ZLIB <xref target="RFC1950"/>, Brotli <xref target="RFC7932"/>, and ZSTD <xref target="I-D.kucherawy-rfc8478bis"/>.</t>

<t>Additional compression formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-unpack-info" title="suit-parameter-unpack-info">

<t>SUIT_Unpack_Info defines the information required for a device to interpret a packed format. This document defines the use of the following binary encodings: Intel HEX <xref target="HEX"/>, Motorola S-record <xref target="SREC"/>,  Executable and Linkable Format (ELF) <xref target="ELF"/>, and Common Object File Format (COFF) <xref target="COFF"/>.</t>

<t>Additional packing formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-uri" title="suit-parameter-uri">

<t>A URI from which to fetch a resource</t>

</section>
<section anchor="suit-parameter-source-component" title="suit-parameter-source-component">

<t>A Component Index</t>

</section>
<section anchor="suit-parameter-run-args" title="suit-parameter-run-args">

<t>An encoded set of arguments for Run</t>

</section>
<section anchor="suit-parameter-device-identifier" title="suit-parameter-device-identifier">

<t>A RFC4122 UUID representing the device or component</t>

</section>
<section anchor="suit-parameter-minimum-battery" title="suit-parameter-minimum-battery">

<t>A minimum battery level in mWh</t>

</section>
<section anchor="suit-parameter-update-priority" title="suit-parameter-update-priority">

<t>The priority of the update</t>

</section>
<section anchor="suit-parameter-version" title="suit-parameter-version">

<t>TBD.</t>

</section>
<section anchor="suit-parameter-wait-info" title="suit-parameter-wait-info">

<t>TBD.</t>

</section>
<section anchor="suit-parameter-uri-list" title="suit-parameter-uri-list">

<t>TBD.</t>

</section>
<section anchor="suit-parameter-strict-order" title="suit-parameter-strict-order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

</section>
<section anchor="suit-parameter-soft-failure" title="suit-parameter-soft-failure">

<t>When executing a command sequence inside SUIT_Directive_Try_Each and a condition failure occurs, the manifest processor aborts the sequence. If Soft Failure is True, it returns Success. Otherwise, it returns the original condition failure. SUIT_Parameter_Soft_Failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates.</t>

</section>
<section anchor="suit-parameter-custom" title="suit-parameter-custom">

<t>TBD.</t>

</section>
<section anchor="suitparameters-cddl" title="SUIT_Parameters CDDL">

<t>The following CDDL describes all SUIT_Parameters.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Parameters //= (suit-parameter-vendor-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-component-offset => uint)

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Events)


SUIT_Parameters //= (suit-parameter-uri-list
    => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zlib
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_brotli
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zstd

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Coff
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Srec
]]></artwork></figure>

</section>
</section>
<section anchor="suitcommandsequence" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution</t>
  <t>Payload Fetch</t>
  <t>Payload Installation</t>
  <t>Image Validation</t>
  <t>Image Loading</t>
  <t>Run or Boot</t>
</list></t>

<t>Each of these follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>The lists of commands are logically structured into sequences of zero or more conditions followed by zero or more directives. The <spanx style="strong">logical</spanx> structure is described by the following CDDL:</t>

<figure><artwork><![CDATA[
Command_Sequence = {
    conditions => [ * Condition],
    directives => [ * Directive]
}
]]></artwork></figure>

<t>This introduces significant complexity in the parser, however, so the structure is flattened to make parsing simpler:</t>

<figure><artwork><![CDATA[
SUIT_Command_Sequence = [ + (SUIT_Condition/SUIT_Directive) ]
]]></artwork></figure>

<t>Each condition is a command code identifier, followed by Nil. Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or Nil</t>
</list></t>

<t>Argument blocks are defined for each type of directive.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behavior.</t>

<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. Conditions never take arguments; conditions should test using parameters instead. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifiers"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifiers"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifiers"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Image Not Match</c>
      <c>suit-condition-image-not-match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>Use Before</c>
      <c>suit-condition-use-before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-condition-component-offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>Minimum Battery</c>
      <c>suit-condition-minimum-battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>Update Authorized</c>
      <c>suit-condition-update-authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>Version</c>
      <c>suit-condition-version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>Custom Condition</c>
      <c>SUIT_Condition_Custom</c>
      <c><xref target="SUIT_Condition_Custom "/></c>
</texttable>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary use.</t>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A device may match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a device that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This device might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

<section anchor="identifiers" title="suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing device MUST match the specified UUID in order to consider the manifest valid. These identifiers MAY be scoped by component.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the digest parameter for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the supplied digest. If no digest is specified, then the digest is compared against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the suit-parameter-use-before parameter, which must have already been set as a parameter, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-component-offset" title="suit-condition-component-offset">

<t>TBD.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a device’s battery level before installing an update. This condition is for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-update-authorized" title="suit-condition-update-authorized">

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. Argument is an integer priority level. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. The image can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>The following CDDL describes SUIT_Condition_Version_Argument</t>

<figure><artwork><![CDATA[
SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]

SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

</section>
<section anchor="SUIT_Condition_Custom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
<section anchor="suitcondition-cddl" title="SUIT_Condition CDDL">

<t>The following CDDL describes SUIT_Condition:</t>

<figure><artwork><![CDATA[
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        nil)
SUIT_Condition //= (suit-condition-component-offset,  nil)
SUIT_Condition //= (suit-condition-minimum-battery,   nil)
SUIT_Condition //= (suit-condition-update-authorized, nil)
SUIT_Condition //= (suit-condition-version,           nil)
SUIT_Condition //= (suit-condition-component-offset,  nil)
]]></artwork></figure>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Set Dependency Index</c>
      <c>suit-directive-set-dependency-index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>Abort</c>
      <c>suit-directive-abort</c>
      <c><xref target="suit-directive-abort"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>Set Parameters</c>
      <c>suit-directive-set-parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Wait For Event</c>
      <c>suit-directive-wait</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

</section>
<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the concatenation of suit-components and suit-dependency-components. If the following directives apply to ALL components, then the boolean value “True” is used instead of an index. True does not apply to dependency components. If the following directives apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>The following CDDL describes the argument to suit-directive-set-component-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Component_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

<t>The following CDDL describes the argument to suit-directive-set-dependency-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Manifest_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>SUIT_Parameter_Soft_Failure is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The following CDDL describes the SUIT_Try_Each argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]
]]></artwork></figure>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

<t>The argument to suit-directive-process-dependency is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Process_Dependency_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>The argument to suit-directive-set-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

<t>N.B.: A directive code is reserved for an optimization: a way to set a parameter to the contents of another parameter, optionally with another component ID.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>The argument to suit-directive-override-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Override_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and manifest-index, respectively. If component-index or manifest-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr.</t>

<t>suit-directive-fetch reads the URI or URI List parameter to find the source of the fetch it performs.</t>

<t>The behavior of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

<t>The argument to suit-directive-fetch is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Fetch_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behavior of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t><spanx style="strong">N.B.</spanx> Fetch and Copy are very similar. Merging them into one command may be appropriate.</t>

<t>suit-directive-copy reads its source from SUIT_Parameter_Source_Component.</t>

<t>The argument to suit-directive-copy is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Copy_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments provided to Run are forwarded to the executable code located in Component Index, in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

<t>The argument to suit-directive-run is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

<t>The following CDDL defines the encoding of these events.</t>

<figure><artwork><![CDATA[
SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorization = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day
                                            ; (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>The following CDDL describes the SUIT_Run_Sequence argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Sequence_Argument = bstr .cbor SUIT_Command_Sequence
]]></artwork></figure>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>SUIT_Parameter_Soft_Failure defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they must be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

<section anchor="suitdirective-cddl" title="SUIT_Directive CDDL">

<t>The following CDDL describes SUIT_Directive:</t>

<figure><artwork><![CDATA[
SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,         
                    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,             
                    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,       
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,  
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,                 
                    { + SUIT_Wait_Events })

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorization = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day
                                            ; (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
</section>
</section>
<section anchor="suittextmap" title="SUIT_Text_Map">
<t>The SUIT_Text_Map contains all text descriptions needed for this manifest. The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The yaml-formatted document that was used to create the manifest</c>
      <c>suit-text-version-dependencies</c>
      <c>List of component versions required by the manifest</c>
</texttable>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the device, authenticated by a trusted party or stored on the device. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a device to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="suit-digest-container" title="SUIT Digest Container">

<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest. This structure is described by the following CDDL.</t>

<t>The algorithms listed are sufficient for verifying integrity of Firmware Updates as of this writing, however this may change over time.</t>

<figure><artwork><![CDATA[
SUIT_Digest = [
 suit-digest-algorithm-id : $suit-digest-algorithm-ids,
 suit-digest-bytes : bytes,
 ? suit-digest-parameters : any
]

digest-algorithm-ids /= algorithm-id-sha224
digest-algorithm-ids /= algorithm-id-sha256
digest-algorithm-ids /= algorithm-id-sha384
digest-algorithm-ids /= algorithm-id-sha512
digest-algorithm-ids /= algorithm-id-sha3-224
digest-algorithm-ids /= algorithm-id-sha3-256
digest-algorithm-ids /= algorithm-id-sha3-384
digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8
]]></artwork></figure>

</section>
<section anchor="secconditional" title="Creating Conditional Sequences">

<t>For some use cases, it is important to provide a sequence that can fail without terminating an update. For example, a dual-image XIP MCU may require an update that can be placed at one of two offsets. This has two implications, first, the digest of each offset will be different. Second, the image fetched for each offset will have a different URI. Conditional sequences allow this to be resolved in a simple way.</t>

<t>The following JSON representation of a manifest demonstrates how this would be represented. It assumes that the bootloader and manifest processor take care of A/B switching and that the manifest is not aware of this distinction.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version" : 1,
    "sequence-number" : 7,
    "common" :{
        "components" : [
            [b'0']
        ],
        "common-sequence" : [
            {
                "directive-set-var" : {
                    "size": 32567
                },
            },
            {
                "try-each" : [
                    [
                        {"condition-component-offset" : "<offset A>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 A>"
                            }
                        }
                    ],
                    [
                        {"condition-component-offset" : "<offset B>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 B>"
                            }
                        }
                    ],
                    [{ "abort" : null }]
                ]
            }
        ]
    }
    "fetch" : [
        {
            "try-each" : [
                [
                    {"condition-component-offset" : "<offset A>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI A>"
                        }
                    }
                ],
                [
                    {"condition-component-offset" : "<offset B>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI B>"
                        }
                    }
                ],
                [{ "directive-abort" : null }]
            ]
        },
        "fetch" : null
    ]
}
]]></artwork></figure>

</section>
<section anchor="iana" title="IANA Considerations">

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-directives" title="SUIT Directives">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>12</c>
      <c>Set Component Index</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>14</c>
      <c>Abort</c>
      <c>15</c>
      <c>Try Each</c>
      <c>16</c>
      <c>Reserved</c>
      <c>17</c>
      <c>Reserved</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>21</c>
      <c>Fetch</c>
      <c>22</c>
      <c>Copy</c>
      <c>23</c>
      <c>Run</c>
      <c>29</c>
      <c>Wait For Event</c>
      <c>30</c>
      <c>Run Sequence</c>
      <c>32</c>
      <c>Swap</c>
</texttable>

</section>
<section anchor="suit-conditions" title="SUIT Conditions">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>3</c>
      <c>Image Match</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>4</c>
      <c>Use Before</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>27</c>
      <c>Update Authorized</c>
      <c>28</c>
      <c>Version</c>
      <c>nint</c>
      <c>Custom Condition</c>
</texttable>

</section>
<section anchor="suit-parameters" title="SUIT Parameters">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c>&#160;</c>
      <c>2</c>
      <c>Class ID</c>
      <c>&#160;</c>
      <c>3</c>
      <c>Image Digest</c>
      <c>&#160;</c>
      <c>4</c>
      <c>Use Before</c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>&#160;</c>
      <c>12</c>
      <c>Strict Order</c>
      <c>&#160;</c>
      <c>13</c>
      <c>Soft Failure</c>
      <c>&#160;</c>
      <c>14</c>
      <c>Image Size</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Encryption Info</c>
      <c>&#160;</c>
      <c>19</c>
      <c>Compression Info</c>
      <c>&#160;</c>
      <c>20</c>
      <c>Unpack Info</c>
      <c>&#160;</c>
      <c>21</c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c>22</c>
      <c>Source Component</c>
      <c>&#160;</c>
      <c>23</c>
      <c>Run Args</c>
      <c>&#160;</c>
      <c>24</c>
      <c>Device ID</c>
      <c>&#160;</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>&#160;</c>
      <c>27</c>
      <c>Update Priority</c>
      <c>&#160;</c>
      <c>28</c>
      <c>Version</c>
      <c>&#160;</c>
      <c>29</c>
      <c>Wait Info</c>
      <c>&#160;</c>
      <c>30</c>
      <c>URI List</c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom</c>
      <c>&#160;</c>
</texttable>

</section>
<section anchor="suit-text-values" title="SUIT Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c>2</c>
      <c>Update Description</c>
      <c>3</c>
      <c>Vendor Name</c>
      <c>4</c>
      <c>Model Name</c>
      <c>5</c>
      <c>Vendor Domain</c>
      <c>6</c>
      <c>Model Info</c>
      <c>7</c>
      <c>Component Description</c>
      <c>8</c>
      <c>Manifest JSON Source</c>
      <c>9</c>
      <c>Manifest YAML Source</c>
      <c>10</c>
      <c>Component Version Dependencies</c>
</texttable>

</section>
<section anchor="suit-algorithm-identifiers" title="SUIT Algorithm Identifiers">

<t>TBD.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A detailed discussion about security can be found in the architecture document <xref target="I-D.ietf-suit-architecture"/> and in <xref target="I-D.ietf-suit-information-model"/>.</t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>RFC EDITOR: PLEASE REMOVE THIS SECTION</t>

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<date month='May' day='22' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-09.txt' />
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='January' day='20' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-05.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='April' day='4' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-08.txt' />
</reference>



<reference  anchor="RFC7932" target='https://www.rfc-editor.org/info/rfc7932'>
<front>
<title>Brotli Compressed Data Format</title>
<author initials='J.' surname='Alakuijala' fullname='J. Alakuijala'><organization /></author>
<author initials='Z.' surname='Szabadka' fullname='Z. Szabadka'><organization /></author>
<date year='2016' month='July' />
<abstract><t>This specification defines a lossless compressed data format that compresses data using a combination of the LZ77 algorithm and Huffman coding, with efficiency comparable to the best currently available general-purpose compression methods.</t></abstract>
</front>
<seriesInfo name='RFC' value='7932'/>
<seriesInfo name='DOI' value='10.17487/RFC7932'/>
</reference>



<reference  anchor="RFC1950" target='https://www.rfc-editor.org/info/rfc1950'>
<front>
<title>ZLIB Compressed Data Format Specification version 3.3</title>
<author initials='P.' surname='Deutsch' fullname='P. Deutsch'><organization /></author>
<author initials='J-L.' surname='Gailly' fullname='J-L. Gailly'><organization /></author>
<date year='1996' month='May' />
<abstract><t>This specification defines a lossless compressed data format.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind.</t></abstract>
</front>
<seriesInfo name='RFC' value='1950'/>
<seriesInfo name='DOI' value='10.17487/RFC1950'/>
</reference>



<reference anchor="I-D.kucherawy-rfc8478bis">
<front>
<title>Zstandard Compression and the application/zstd Media Type</title>

<author initials='Y' surname='Collet' fullname='Yann Collet'>
    <organization />
</author>

<author initials='M' surname='Kucherawy' fullname='Murray Kucherawy'>
    <organization />
</author>

<date month='April' day='23' year='2020' />

<abstract><t>Zstandard, or "zstd" (pronounced "zee standard"), is a data compression mechanism.  This document describes the mechanism and registers a media type and content encoding to be used when transporting zstd-compressed content via Multipurpose Internet Mail Extensions (MIME).  It also registers a corresponding media type, content encoding, and structured syntax suffix.  Despite use of the word "standard" as part of its name, readers are advised that this document is not an Internet Standards Track specification; it is being published for informational purposes only.  This document replaces and obsoletes RFC 8478.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-kucherawy-rfc8478bis-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-kucherawy-rfc8478bis-05.txt' />
</reference>


<reference anchor="HEX" target="https://en.wikipedia.org/wiki/Intel_HEX">
  <front>
    <title>Intel HEX</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="SREC" target="https://en.wikipedia.org/wiki/SREC_(file_format)">
  <front>
    <title>SREC (file format)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="ELF" target="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">
  <front>
    <title>Executable and Linkable Format (ELF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="COFF" target="https://en.wikipedia.org/wiki/COFF">
  <front>
    <title>Common Object File Format (COFF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section numbered="no" anchor="full-cddl" title="A. Full CDDL">
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Envelope = {
    ? suit-delegation            => bstr .cbor SUIT_Delegation
    ? suit-authentication-wrapper
        => bstr .cbor SUIT_Authentication_Wrapper / nil,
    $$SUIT_Manifest_Wrapped,
    * $$SUIT_Severed_Fields,
}

SUIT_Delegation = [ + [ + CWT ] ]

CWT = SUIT_Authentication_Block

SUIT_Authentication_Wrapper = [ + bstr .cbor SUIT_Authentication_Block ]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

$$SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
$$SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)

SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

$$SUIT_Severed_Fields //= ( suit-dependency-resolution =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-payload-fetch =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-install =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-text =>
    bstr .cbor SUIT_Text_Map)
$$SUIT_Severed_Fields //= (suit-coswid =>
    bstr .cbor concise-software-identity)

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : suit-digest-algorithm-ids,
  suit-digest-bytes : bstr,
  ? suit-digest-parameters : any
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => #6.32(tstr),
    * $$SUIT_Severable_Command_Sequences,
    * $$SUIT_Command_Sequences,
    * $$SUIT_Protected_Elements,
}

$$SUIT_Severable_Command_Sequences //= (suit-dependency-resolution =>
    SUIT_Severable_Command_Sequence)
$$SUIT_Severable_Command_Sequences //= (suit-payload-fetch =>
    SUIT_Severable_Command_Sequence)
$$SUIT_Severable_Command_Sequences //= (suit-install =>
    SUIT_Severable_Command_Sequence)

SUIT_Severable_Command_Sequence =
    SUIT_Digest / bstr .cbor SUIT_Command_Sequence

$$SUIT_Command_Sequences //= ( suit-validate =>
    bstr .cbor SUIT_Command_Sequence )
$$SUIT_Command_Sequences //= ( suit-load =>
    bstr .cbor SUIT_Command_Sequence )
$$SUIT_Command_Sequences //= ( suit-run =>
    bstr .cbor SUIT_Command_Sequence )

$$SUIT_Protected_Elements //= ( suit-text => SUIT_Digest )
$$SUIT_Protected_Elements //= ( suit-coswid => SUIT_Digest )

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor SUIT_Dependencies,
    ? suit-components             => bstr .cbor SUIT_Components,
    ? suit-dependency-components
        => bstr .cbor SUIT_Component_References,
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]
SUIT_Component_References = [ + SUIT_Component_Reference ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    suit-dependency-prefix => SUIT_Component_Identifier,
}

SUIT_Component_Identifier =  [* bstr]


SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        nil)
SUIT_Condition //= (suit-condition-minimum-battery,   nil)
SUIT_Condition //= (suit-condition-update-authorized, nil)
SUIT_Condition //= (suit-condition-version,           nil)
SUIT_Condition //= (suit-condition-component-offset,  nil)

SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-swap,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,                 nil)
SUIT_Directive //= (suit-directive-abort,                nil)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]

SUIT_Parameters //= (suit-parameter-vendor-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-component-offset => uint)

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zlib
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_brotli
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zstd

SUIT_Compression_Algorithm_zlib = 1
SUIT_Compression_Algorithm_brotli = 2
SUIT_Compression_Algorithm_zstd = 3

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Coff
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Srec

SUIT_Unpack_Algorithm_Hex = 1
SUIT_Unpack_Algorithm_Elf = 2
SUIT_Unpack_Algorithm_Coff = 3
SUIT_Unpack_Algorithm_Srec = 4

SUIT_Text_Map = {SUIT_Text_Keys => tstr}

SUIT_Text_Keys /= suit-text-manifest-description
SUIT_Text_Keys /= suit-text-update-description
SUIT_Text_Keys /= suit-text-vendor-name
SUIT_Text_Keys /= suit-text-model-name
SUIT_Text_Keys /= suit-text-vendor-domain
SUIT_Text_Keys /= suit-text-model-info
SUIT_Text_Keys /= suit-text-component-description
SUIT_Text_Keys /= suit-text-manifest-json-source
SUIT_Text_Keys /= suit-text-manifest-yaml-source
SUIT_Text_Keys /= suit-text-version-dependencies

suit-delegation = 1
suit-authentication-wrapper = 2
suit-manifest = 3

suit-manifest-encryption-info = 4
suit-manifest-encrypted       = 5

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-dependency-components = 3
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-component-identifier = 1
suit-component-dependency-index = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5

suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-abort                    = 14
suit-directive-try-each                 = 15
;suit-directive-do-each                  = 16 ; TBD
;suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-run-sequence             = 30
suit-directive-swap                     = 32

suit-wait-event-authorization = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-use-before        = 4
suit-parameter-component-offset  = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-encryption-info   = 18
suit-parameter-compression-info  = 19
suit-parameter-unpack-info       = 20
suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29
suit-parameter-uri-list          = 30

suit-parameter-custom = nint

suit-compression-algorithm = 1
suit-compression-parameters = 2

suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-vendor-name           = 3
suit-text-model-name            = 4
suit-text-vendor-domain         = 5
suit-text-model-info            = 6
suit-text-component-description = 7
suit-text-manifest-json-source  = 8
suit-text-manifest-yaml-source  = 9
suit-text-version-dependencies  = 10
]]></artwork></figure>

</section>
<section numbered="no" anchor="examples" title="B. Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<section anchor="example-0-secure-boot" title="Example 0: Secure Boot">

<t>Secure boot and compatibility check.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820655
f1230fd3833ca828c18200498fd1cd90656a9a2620c6989921c06623703515840a0416
20607b7765a51fe0566e5d8fed95491ee6df622132524fdbe67607bf7f2794d7a71dad
7230d3cab86c5091a226d00061b0a74a01b3d371e07d5b3eca3d4' / [
        h'd28443a10126a0582482025820655f1230fd3833ca828c18200498fd1cd9
0656a9a2620c6989921c06623703515840a041620607b7765a51fe0566e5d8fed95491
ee6df622132524fdbe67607bf7f2794d7a71dad7230d3cab86c5091a226d00061b0a74
a01b3d371e07d5b3eca3d4' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'82025820655f1230fd3833ca828c18200498fd1c
d90656a9a2620c6989921c0662370351' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"655f1230fd3833ca828c18200498fd1cd90656a9a2620c6989921c0662370351"'
                ] /,
                / signature / h'"a041620607b7765a51fe0566e5d8fed95491e
e6df622132524fdbe67607bf7f2794d7a71dad7230d3cab86c5091a226d00061b0a74a
01b3d371e07d5b3eca3d4"'
            ]) /
    ] /,
    / manifest / 3:h'a501010201035860a20244818141000458568614a40150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582
48202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543
2100e1987d001f602f60a438203f60c438217f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:1,
        / common / 3:h'a20244818141000458568614a40150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112
233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f
602f6' / {
            / components / 2:h'81814100' / [
                [h'"00"']
            ] /,
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'8217f6' / [
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  118</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a1035872a501010201035860a20244818141000458568614a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450358248202582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba98765432100e1987d001f602f60a438203f60c438217f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  235</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a0582482025820655f1230fd3833ca828c
18200498fd1cd90656a9a2620c6989921c06623703515840a041620607b7
765a51fe0566e5d8fed95491ee6df622132524fdbe67607bf7f2794d7a71
dad7230d3cab86c5091a226d00061b0a74a01b3d371e07d5b3eca3d40358
72a501010201035860a20244818141000458568614a40150fa6b4a53d5ad
5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d001f602f60a438203f60c438217f6
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload" title="Example 1: Simultaneous Download and Installation of Payload">

<t>Simultaneous download and installation of payload.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820815
32771898e4ebcccf12c607420eba62b5086192cac4c99692835b58ee62f7b584081592
1e5148e9b81e79d8be570de6bb42ba2e903c8549f0e13dee4d0ee420d90dd9f8537ebe
ad3f92b37df703539879129183b0beaf3ba75cacd8a91e075a24e' / [
        h'd28443a10126a058248202582081532771898e4ebcccf12c607420eba62b
5086192cac4c99692835b58ee62f7b5840815921e5148e9b81e79d8be570de6bb42ba2
e903c8549f0e13dee4d0ee420d90dd9f8537ebead3f92b37df703539879129183b0bea
f3ba75cacd8a91e075a24e' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582081532771898e4ebcccf12c607420eba6
2b5086192cac4c99692835b58ee62f7b' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"81532771898e4ebcccf12c607420eba62b5086192cac4c99692835b58ee62f7b"'
                ] /,
                / signature / h'"815921e5148e9b81e79d8be570de6bb42ba2e
903c8549f0e13dee4d0ee420d90dd9f8537ebead3f92b37df703539879129183b0beaf
3ba75cacd8a91e075a24e"'
            ]) /
    ] /,
    / manifest / 3:h'a501010202035860a20244818141000458568614a40150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582
48202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543
2100e1987d001f602f60958258613a115781b687474703a2f2f6578616d706c652e636
f6d2f66696c652e62696e15f603f60a438203f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:2,
        / common / 3:h'a20244818141000458568614a40150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112
233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f
602f6' / {
            / components / 2:h'81814100' / [
                [h'"00"']
            ] /,
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'8613a115781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e15f603f6' / [
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  153</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a1035895a501010202035860a20244818141000458568614a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450358248202582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba98765432100e1987d001f602f60958258613a115781b687474
703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a43
8203f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  270</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a058248202582081532771898e4ebcccf1
2c607420eba62b5086192cac4c99692835b58ee62f7b5840815921e5148e
9b81e79d8be570de6bb42ba2e903c8549f0e13dee4d0ee420d90dd9f8537
ebead3f92b37df703539879129183b0beaf3ba75cacd8a91e075a24e0358
95a501010202035860a20244818141000458568614a40150fa6b4a53d5ad
5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d001f602f60958258613a115781b687474703a2f
2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a438203f6
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-and-secure-boot" title="Example 2: Simultaneous Download, Installation, and Secure Boot">

<t>Compatibility test, simultaneous download and installation, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820883
90f8988639d8a2cfb6da969fce488333ac5ba77aaf0d66b5623009bbf341158401929f
fd488c455ab40eaf1aa96a7df4a9c16c658221055c3a113232fb81c5751a23a74b5efc
06c459eb47a07028ef3c6a0d9051185dd78899c654249f9070dea' / [
        h'd28443a10126a058248202582088390f8988639d8a2cfb6da969fce48833
3ac5ba77aaf0d66b5623009bbf341158401929ffd488c455ab40eaf1aa96a7df4a9c16
c658221055c3a113232fb81c5751a23a74b5efc06c459eb47a07028ef3c6a0d9051185
dd78899c654249f9070dea' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582088390f8988639d8a2cfb6da969fce488
333ac5ba77aaf0d66b5623009bbf3411' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"88390f8988639d8a2cfb6da969fce488333ac5ba77aaf0d66b5623009bbf3411"'
                ] /,
                / signature / h'"1929ffd488c455ab40eaf1aa96a7df4a9c16c
658221055c3a113232fb81c5751a23a74b5efc06c459eb47a07028ef3c6a0d9051185d
d78899c654249f9070dea"'
            ]) /
    ] /,
    / manifest / 3:h'a601010203035860a20244818141000458568614a40150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582
48202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543
2100e1987d001f602f60958258613a115781b687474703a2f2f6578616d706c652e636
f6d2f66696c652e62696e15f603f60a438203f60c438217f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:h'a20244818141000458568614a40150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112
233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f
602f6' / {
            / components / 2:h'81814100' / [
                [h'"00"']
            ] /,
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'8613a115781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e15f603f6' / [
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'8217f6' / [
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  158</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a103589aa601010203035860a20244818141000458568614a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450358248202582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba98765432100e1987d001f602f60958258613a115781b687474
703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a43
8203f60c438217f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  275</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a058248202582088390f8988639d8a2cfb
6da969fce488333ac5ba77aaf0d66b5623009bbf341158401929ffd488c4
55ab40eaf1aa96a7df4a9c16c658221055c3a113232fb81c5751a23a74b5
efc06c459eb47a07028ef3c6a0d9051185dd78899c654249f9070dea0358
9aa601010203035860a20244818141000458568614a40150fa6b4a53d5ad
5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d001f602f60958258613a115781b687474703a2f
2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a438203f6
0c438217f6
]]></artwork></figure>

</section>
<section anchor="example-3-load-from-external-storage" title="Example 3: Load from External Storage">

<t>Compatibility test, simultaneous download and installation, load from external storage, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820568
56a72f9ac0ee73b4ea3a866cf2e5c990e8ed8c6056608bc221efd42172b2758402a9d7
573ef6dcf5653b39027fdf87b81adeb0f03122bef0ecf5af9c7d77323c32827230f660
8342b7bf5c125f17148bd67880420ab0d03e235e6ca1d15127499' / [
        h'd28443a10126a058248202582056856a72f9ac0ee73b4ea3a866cf2e5c99
0e8ed8c6056608bc221efd42172b2758402a9d7573ef6dcf5653b39027fdf87b81adeb
0f03122bef0ecf5af9c7d77323c32827230f6608342b7bf5c125f17148bd67880420ab
0d03e235e6ca1d15127499' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582056856a72f9ac0ee73b4ea3a866cf2e5c
990e8ed8c6056608bc221efd42172b27' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"56856a72f9ac0ee73b4ea3a866cf2e5c990e8ed8c6056608bc221efd42172b27"'
                ] /,
                / signature / h'"2a9d7573ef6dcf5653b39027fdf87b81adeb0
f03122bef0ecf5af9c7d77323c32827230f6608342b7bf5c125f17148bd67880420ab0
d03e235e6ca1d15127499"'
            ]) /
    ] /,
    / manifest / 3:h'a701010204035865a2024782814100814101045858880c001
4a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f
2ab450358248202582000112233445566778899aabbccddeeff0123456789abcdeffed
cba98765432100e1987d001f602f6095827880c0013a115781b687474703a2f2f65786
16d706c652e636f6d2f66696c652e62696e15f603f60a45840c0003f60b4b880c0113a
1160016f603f60c45840c0117f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:4,
        / common / 3:h'a2024782814100814101045858880c0014a40150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
e1987d001f602f6' / {
            / components / 2:h'82814100814101' / [
                [h'"00"'] ,
                [h'"01"']
            ] /,
            / common-sequence / 4:h'880c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602
f6' / [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'880c0013a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f603f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0003f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / load / 11:h'880c0113a1160016f603f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / source-component / 22:0 / [h'"00"'] /,
            } ,
            / directive-copy / 22,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0117f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  182</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358b2a701010204035865a2024782814100814101045858880c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab450358248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d001f602f6095827880c0013
a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e6269
6e15f603f60a45840c0003f60b4b880c0113a1160016f603f60c45840c01
17f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  299</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a058248202582056856a72f9ac0ee73b4e
a3a866cf2e5c990e8ed8c6056608bc221efd42172b2758402a9d7573ef6d
cf5653b39027fdf87b81adeb0f03122bef0ecf5af9c7d77323c32827230f
6608342b7bf5c125f17148bd67880420ab0d03e235e6ca1d151274990358
b2a701010204035865a2024782814100814101045858880c0014a40150fa
6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51
f2ab450358248202582000112233445566778899aabbccddeeff01234567
89abcdeffedcba98765432100e1987d001f602f6095827880c0013a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f6
03f60a45840c0003f60b4b880c0113a1160016f603f60c45840c0117f6
]]></artwork></figure>

</section>
<section anchor="example-4-load-and-decompress-from-external-storage" title="Example 4: Load and Decompress from External Storage">

<t>Compatibility test, simultaneous download and installation, load and decompress from external storage, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a058248202582057b
edc0076919ba83908365faf6d205e95c71268d29a94dc5e82698edd3a48225840e0a4d
c500266518742802f2364b65f983175f060c1555d3d0b186f447500ba60c66e3231674
1c3b642c68fed73d47542c3375c0ab72e0f4b94ec392ab398599d' / [
        h'd28443a10126a058248202582057bedc0076919ba83908365faf6d205e95
c71268d29a94dc5e82698edd3a48225840e0a4dc500266518742802f2364b65f983175
f060c1555d3d0b186f447500ba60c66e32316741c3b642c68fed73d47542c3375c0ab7
2e0f4b94ec392ab398599d' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582057bedc0076919ba83908365faf6d205e
95c71268d29a94dc5e82698edd3a4822' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"57bedc0076919ba83908365faf6d205e95c71268d29a94dc5e82698edd3a4822"'
                ] /,
                / signature / h'"e0a4dc500266518742802f2364b65f983175f
060c1555d3d0b186f447500ba60c66e32316741c3b642c68fed73d47542c3375c0ab72
e0f4b94ec392ab398599d"'
            ]) /
    ] /,
    / manifest / 3:h'a701010205035865a2024782814100814101045858880c001
4a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f
2ab450358248202582000112233445566778899aabbccddeeff0123456789abcdeffed
cba98765432100e1987d001f602f6095827880c0013a115781b687474703a2f2f65786
16d706c652e636f6d2f66696c652e62696e15f603f60a45840c0003f60b4d880c0113a
21301160016f603f60c45840c0117f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:h'a2024782814100814101045858880c0014a40150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
e1987d001f602f6' / {
            / components / 2:h'82814100814101' / [
                [h'"00"'] ,
                [h'"01"']
            ] /,
            / common-sequence / 4:h'880c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602
f6' / [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'880c0013a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f603f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0003f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / load / 11:h'880c0113a21301160016f603f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / source-component / 22:0 / [h'"00"'] /,
                / compression-info / 19:1 / "gzip" /,
            } ,
            / directive-copy / 22,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0117f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  184</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358b4a701010205035865a2024782814100814101045858880c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab450358248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d001f602f6095827880c0013
a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e6269
6e15f603f60a45840c0003f60b4d880c0113a21301160016f603f60c4584
0c0117f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  301</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a058248202582057bedc0076919ba83908
365faf6d205e95c71268d29a94dc5e82698edd3a48225840e0a4dc500266
518742802f2364b65f983175f060c1555d3d0b186f447500ba60c66e3231
6741c3b642c68fed73d47542c3375c0ab72e0f4b94ec392ab398599d0358
b4a701010205035865a2024782814100814101045858880c0014a40150fa
6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51
f2ab450358248202582000112233445566778899aabbccddeeff01234567
89abcdeffedcba98765432100e1987d001f602f6095827880c0013a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f6
03f60a45840c0003f60b4d880c0113a21301160016f603f60c45840c0117
f6
]]></artwork></figure>

</section>
<section anchor="example-5-compatibility-test-download-installation-and-secure-boot" title="Example 5: Compatibility Test, Download, Installation, and Secure Boot">

<t>Compatibility test, download, installation, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820ecc
95235f2ab00b9912f8189b213b3e4ade42b792f491644e76004cd2ba87dc8584093952
6b77d63dac2e138bf074aac757c5f010e8b2cf3ae9fcbba4cafc2d0f81c9ae46bc973c
c0565410a1cb6bf10d2b3d0a2865392255cc4288d0337af3de837' / [
        h'd28443a10126a0582482025820ecc95235f2ab00b9912f8189b213b3e4ad
e42b792f491644e76004cd2ba87dc85840939526b77d63dac2e138bf074aac757c5f01
0e8b2cf3ae9fcbba4cafc2d0f81c9ae46bc973cc0565410a1cb6bf10d2b3d0a2865392
255cc4288d0337af3de837' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'82025820ecc95235f2ab00b9912f8189b213b3e4
ade42b792f491644e76004cd2ba87dc8' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"ecc95235f2ab00b9912f8189b213b3e4ade42b792f491644e76004cd2ba87dc8"'
                ] /,
                / signature / h'"939526b77d63dac2e138bf074aac757c5f010
e8b2cf3ae9fcbba4cafc2d0f81c9ae46bc973cc0565410a1cb6bf10d2b3d0a28653922
55cc4288d0337af3de837"'
            ]) /
    ] /,
    / manifest / 3:h'a701010205035865a2024782814100814101045858880c001
4a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f
2ab450358248202582000112233445566778899aabbccddeeff0123456789abcdeffed
cba98765432100e1987d001f602f6085823840c0113a115781b687474703a2f2f65786
16d706c652e636f6d2f66696c652e62696e094b880c0013a1160116f603f60a45840c0
003f60c45840c0017f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:h'a2024782814100814101045858880c0014a40150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
e1987d001f602f6' / {
            / components / 2:h'82814100814101' / [
                [h'"00"'] ,
                [h'"01"']
            ] /,
            / common-sequence / 4:h'880c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602
f6' / [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / payload-fetch / 8:h'840c0113a115781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            }
        ] /,
        / install / 9:h'880c0013a1160116f603f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / source-component / 22:1 / [h'"01"'] /,
            } ,
            / directive-copy / 22,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0003f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0017f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  178</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358aea701010205035865a2024782814100814101045858880c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab450358248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d001f602f6085823840c0113
a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e6269
6e094b880c0013a1160116f603f60a45840c0003f60c45840c0017f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  295</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a0582482025820ecc95235f2ab00b9912f
8189b213b3e4ade42b792f491644e76004cd2ba87dc85840939526b77d63
dac2e138bf074aac757c5f010e8b2cf3ae9fcbba4cafc2d0f81c9ae46bc9
73cc0565410a1cb6bf10d2b3d0a2865392255cc4288d0337af3de8370358
aea701010205035865a2024782814100814101045858880c0014a40150fa
6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51
f2ab450358248202582000112233445566778899aabbccddeeff01234567
89abcdeffedcba98765432100e1987d001f602f6085823840c0113a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e094b
880c0013a1160116f603f60a45840c0003f60c45840c0017f6
]]></artwork></figure>

</section>
<section anchor="example-6-two-images" title="Example 6: Two Images">

<t>Compatibility test, 2 images, simultaneous download and installation, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820732
5a7d3acf130d161810c4874f275f658970b7bc5a63cda56e9920a4aaba3a3584088cb9
6211bcc4cdb59cb0022cb213017b2d117bac1a5460ae92903acc196282f7888368bf0a
065756e43f53cdbeee367e9523312063e8eaad0889a7cee371859' / [
        h'd28443a10126a05824820258207325a7d3acf130d161810c4874f275f658
970b7bc5a63cda56e9920a4aaba3a3584088cb96211bcc4cdb59cb0022cb213017b2d1
17bac1a5460ae92903acc196282f7888368bf0a065756e43f53cdbeee367e952331206
3e8eaad0889a7cee371859' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'820258207325a7d3acf130d161810c4874f275f6
58970b7bc5a63cda56e9920a4aaba3a3' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"7325a7d3acf130d161810c4874f275f658970b7bc5a63cda56e9920a4aaba3a3"'
                ] /,
                / signature / h'"88cb96211bcc4cdb59cb0022cb213017b2d11
7bac1a5460ae92903acc196282f7888368bf0a065756e43f53cdbeee367e9523312063
e8eaad0889a7cee371859"'
            ]) /
    ] /,
    / manifest / 3:h'a50101020303589da20244818141000458938814a20150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f825
8308405f614a20358248202582000112233445566778899aabbccddeeff0123456789a
bcdeffedcba98765432100e1987d058328405f614a2035824820258200123456789abc
deffedcba987654321000112233445566778899aabbccddeeff0e1a00012c2201f602f
6095853860f8258248405f613a115781c687474703a2f2f6578616d706c652e636f6d2
f66696c65312e62696e58248405f613a115781c687474703a2f2f6578616d706c652e6
36f6d2f66696c65322e62696e15f603f60a438203f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:h'a20244818141000458938814a20150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f8258308405f614a20
358248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987
65432100e1987d058328405f614a2035824820258200123456789abcdeffedcba98765
4321000112233445566778899aabbccddeeff0e1a00012c2201f602f6' / {
            / components / 2:h'81814100' / [
                [h'"00"']
            ] /,
            / common-sequence / 4:h'8814a20150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab450f8258308405f614a203582482
02582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210
0e1987d058328405f614a2035824820258200123456789abcdeffedcba987654321000
112233445566778899aabbccddeeff0e1a00012c2201f602f6' / [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                } ,
                / directive-try-each / 15,[
                    h'8405f614a20358248202582000112233445566778899aabb
ccddeeff0123456789abcdeffedcba98765432100e1987d0' / [
                        / condition-component-offset / 5,F6 / nil / ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:h'820258200011223344556
6778899aabbccddeeff0123456789abcdeffedcba9876543210' / [
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                            ] /,
                            / image-size / 14:34768,
                        }
                    ] / ,
                    h'8405f614a2035824820258200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c22' / [
                        / condition-component-offset / 5,F6 / nil / ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:h'820258200123456789abc
deffedcba987654321000112233445566778899aabbccddeeff' / [
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'"0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff"'
                            ] /,
                            / image-size / 14:76834,
                        }
                    ] /
                ] ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'860f8258248405f613a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65312e62696e58248405f613a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65322e62696e15f603f6' / [
            / directive-try-each / 15,[
                h'8405f613a115781c687474703a2f2f6578616d706c652e636f6d
2f66696c65312e62696e' / [
                    / condition-component-offset / 5,F6 / nil / ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file1.bin',
                    }
                ] / ,
                h'8405f613a115781c687474703a2f2f6578616d706c652e636f6d
2f66696c65322e62696e' / [
                    / condition-component-offset / 5,F6 / nil / ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file2.bin',
                    }
                ] /
            ] ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  261</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a103590100a50101020303589da20244818141000458938814a20150fa6b
4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2
ab450f8258308405f614a20358248202582000112233445566778899aabb
ccddeeff0123456789abcdeffedcba98765432100e1987d058328405f614
a2035824820258200123456789abcdeffedcba9876543210001122334455
66778899aabbccddeeff0e1a00012c2201f602f6095853860f8258248405
f613a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58248405f613a115781c687474703a2f2f6578616d706c652e63
6f6d2f66696c65322e62696e15f603f60a438203f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  378</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a05824820258207325a7d3acf130d16181
0c4874f275f658970b7bc5a63cda56e9920a4aaba3a3584088cb96211bcc
4cdb59cb0022cb213017b2d117bac1a5460ae92903acc196282f7888368b
f0a065756e43f53cdbeee367e9523312063e8eaad0889a7cee3718590359
0100a50101020303589da20244818141000458938814a20150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f
8258308405f614a20358248202582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100e1987d058328405f614a20358
24820258200123456789abcdeffedcba9876543210001122334455667788
99aabbccddeeff0e1a00012c2201f602f6095853860f8258248405f613a1
15781c687474703a2f2f6578616d706c652e636f6d2f66696c65312e6269
6e58248405f613a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65322e62696e15f603f60a438203f6
]]></artwork></figure>

</section>
</section>
<section numbered="no" anchor="design-rational" title="C. Design Rational">

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

</section>
<section numbered="no" anchor="implementation-matrix" title="D. Implementation Confirmance Matrix">

<t>This section summarizes the functionality a minimal implementation needs
to offer to claim conformance to this specification.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>OPTIONAL</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>OPTIONAL</c>
      <c>Component Offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>OPTIONAL</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>REQUIRED if dependencies used</c>
      <c>Abort</c>
      <c><xref target="suit-directive-abort"/></c>
      <c>OPTIONAL</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>OPTIONAL</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>OPTIONAL</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>TThe subsequent table shows the parameters</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>TBD</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>TBD</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>TBD</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>TBD</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>TBD</c>
      <c>Component Offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>TBD</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>TBD</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>TBD</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>TBD</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>TBD</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>TBD</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>TBD</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>TBD</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>TBD</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>TBD</c>
      <c>Version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>TBD</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>TBD</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>TBD</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>TBD</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>TBD</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>TBD</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
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
SglocwUZVAljojSv4lFliyaHXh0EbcGCj8ZQD0X/OTpNNEvIWvj6j45txHg7
aVPOQRb5lCjInu+S1w71daK8FpgZLzsUajnNhVsDwbDTQ3NqxEQ7zAqJXBqi
y9hHsf1z43ZV2Z7ZlCFfjibrg48/HMhcwYeKc8A652jH/rt/VT8N9xxQYq5a
giiIHFhVBAvNSfEhvNCnPLe/NwgZrcxyfXQ69b10l2qj75n0qXqThml8BWOJ
Zgsz8BZuIvdKAkY/e/TmRjLpJ8OhVYtoxkI+23k2Kw/E1/s//uM/Nje+atb8
9xVa+3Wlkf/fu1X9TpNxIlVUiLDYfu/IR8MJDvhequzQtxdjzBeEUXBw/+i/
pp3o91HtpM6CSZ8JsFAFb/MrnFgXYH6Oqv+9Y1cjDfTm/AimI/+3egVfL+Bk
mi+TeEijXOJmvBWo20ndCk6eX3x/flr9Zv7XuGY8Y+P6ugejq48kaOfC4JU3
QGhhdhFf6QBklgtuYfkA7/D/2KB3xTDNR7FsC1/ZAV6q/E6mWEx1Yw72nbr7
Vbf4LvoXGOTd6mNctgI5JteIVj6lr5q/rx1BVqe+EOenRaXvuxoAv/P6WhgU
2nfJzr5yoGJGL23tXfRE/GfuA3VLOUb7/lKs+spd/JfGnkbep+vgg9M3Foei
tXFJ+j54EPx9jb51mxLSyF7YXgietRop7eY8iB5Ja2rhMBuCYhyTOiYDsW93
CWfJdpxcOY911bFbzR0sI9qcPiAVowHo1dN48Ooyvroi1wP+6SK9mupv9N5r
tkpjJudf3fUHUlWUQhvZI4YcmMj93XflqCy5sjrit8PLq6aQfPn4JEKDlGea
iladBwURDND1xsmdIykl9O2kjZ6ZB1QcR/QYNGu/eB6YVw7zml7F+XCshrh4
mk0phMAtLIMZb1uUGUz4LUyD4AaN4Hq8BbARxQmB9ZbMngVS8GvZxtHp0F+w
xHwGJtN48Ot4WMZK1xwTE8PBYfKUjUSQhe3PS9Yii2+Y+imaf1nCo6JpOjbB
cqXs7ogHbHorBcZankcP2S5mZngKN/0T7dy8GZYzkmtf5SP4ylMEn/lmBqRa
lLGCkz6jI6nyNsb0ms7gxJi/casQsmwmofclJo55te813sjs0+PRayZurDwN
gpYLzRLI0JnNq6VtNl8Xu13O+CRqOpBTBWgmbhJzG2k6eYo6xiyY+dyuuTqp
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
3dXZyekFJVOddXf38g7mY7UlRZr436OzP5w/i168PP/u+PIs+ubsz/Tr5sbT
8z98fXx1dvz00dM/PLr96Q8XT3cO4e8/nJzIv2/Ovn70h/ZNfHP+6Pjf//3q
ePaXP//4l5Nv//Dk6W77u0cnmxsnP/75Yv6nr9qHP/5hMr3944t8dvrk8pft
6/RPz69fHj87OT6+OBtnZ1jV6KefDv94/d3PabL/LJu8+emnJwcv5282N158
1U/n338/uB6+Oc4vi9E3r+fFyZ/Pfr755tk8f/b1n9LD5496z766mR5/Oy9+
mbzs9p7uzL9Jv5etnT07DWxMsOWyEiw5W/TH6YBS1jo5f/0yl4UFfRiO3z56
cn7igvHx65uzmz9//U32l/NffmyfHP/7n8/l36fH/z44BcCdXf8xfvSHn3ae
/PTTm4s/fzf483TxS/zHfO+ndPusv7nR/2V7spN/N56e/6l/8017/+vb2ZP+
8eTR08HJj/34l5ednTeXV8NfRsUfbx4/6T/dfT2c//L8yUU2vnr40AVEeWUC
B0p7LnuKqPiXZHyS3MPCGijOa7ITuWdR+4gj8JPoUZYR9ZU/MUOclCeezIAX
4xqV0eA6Gby2STZFBbkd1SgutqPu0fUXB53dg73RsHuws9OLO+1Ody9u7x50
dw667S78b3tvF+jXqNPttUfD3kGvN4gPugeDDnxp7xwejIadwfAQGu3Fh3F3
r9se7B0eHB52O4P23l63t9/u7cL4O+24vYOmMBiuvd/f39/bjXc7o6S9u7eX
7A4PRsnwcHfnsJMke8PRXrfb6XV3uzujYT/Z28cOo/1Rd/9wZ7gf73eGGJO8
D8sZwlL6B3uD3fZhJ+5294btdnuv02/H+ztxu9PvDXv7naS9P9zt95JB3Bvu
fAE7dlIrXX+xdNMrtry5seamV2x5c2PNTa/Y8uZG/aY7B/cDKaW2NRcDhUpe
f8FwwPY1SZ+2MWIJhztq7sP/bJ1dACpvRduBdE3vg79uR/CyO3MG5gnlrdrW
4u60zHWPaHNjFV6W8KGyVRu8BzcFN8wRV+Edcy8vgG97c+P6i63VqLR8lVtf
BDJk1YDXpEgmSG2tg38JIOCnwL8YLkQI/8rL/+EBwsXfxLZ9sbejHtCkeLcN
yNjuwv/rAXVqx3DmOzsHnYPOTgem3Nk92N072OvsxDvtzm57FANl6e/Eu73h
bjzcHQ1H/eRwmOzt9ZKd4U5nBJvuwoA7h9141NmBEzzcTXYO+qOd7mG/OwSg
dOP+zi7OBIyhIQHtdqfT7fZ6Ozu7ALL9/QM4mDju9weD4TBJRiO4LL2d3b39
g8O4PxjCD8lw0I8PDwDQOz1Mp9NuJx34E2DUGe21u/D/4p0eDNyDfw3wX539
Ufm6WUgYhh/vW6cRbFJW9yJB95uK2legugqKPgwBMT4Qij4MMUnQh0HRh+Hm
BkExQKC2I0e7q68a77Lmjv8Vbke7veUmHA3fKwWhVapsRzs4fj3cBGoAvo+D
m0ANtv1xcGOobW4EAbEdLdeRATTbjdr3wNb9gDvdAbBs1UFDYbGFB6KNmtiq
ic2AZcKWTbfpEjJrCoTAtHjaW6vAi9NizixuhfGsh01s18SGTbflklk9dQ5f
qaXEAp7k9Q9syWPEs3/Ig6QnXHmUPoq4wWpDjxL+F36YXPCRLglo2s5Rb2d/
7yDIOwTftmUWDxiv8XiPk5PA/13Rv6K8A2g63ZeRBJ+v2Y6MjQtW0GZ86DGJ
+muVjoSsLIBGwal/KE2EWmOYg0ibeTgqc/haZtjWqsF5PzYF5mWGaRnpjEBA
Nq+yphZH/5WSNBFl/R9hzqMo6nTI7KFR3laEi+kV3+/e+VXvI1fxMa86POdL
KOsqxN/cWIeyhl71deC5HJjd3q4LzJU9LLBpo/vdNcS6CluKOQQ/QKwTDhOk
so8Q64BdX81jBjlMPGCUCD8EvRi5AMk+gmnErIcfzjTCvj8cvTxtQecounBq
K0en2c2UpCZUFJyzed6kq3/BEhXpFNxOQ7dTWuokYphU4f2EOoYDtDv2uvv7
nYPDg2QnAXgNADsHgCQ73XbSj/e6/d02HN5hdxAPdgaHh3uH3YPebn/3AHCr
O9rvIzLCKIfAbXaS3c7OQXLYP+gk+4fDg36yu9+Gk+33d7r9uJsctnuDA0DL
EYC6B6eyM2zD/+m2Ad+Hw8PRwW5vP+knmO6uNzrs9nv7wxHiew+O5bDTPewc
9PrtfhKPev14fxeWMzyIDxEjd+PuTnIHHQMsd8WWAS/X2/SKLSMnv9amV2x5
c6N+0/+QOoZVRwRXfwVe/jY6htWotHyVH6FjWAf/4DJ9EvwDETCIfx+nY+j+
Q+kYDmFc2E4HSE5nd/+g09872N+B/6/di7sjaAC/7XX2hvvtvcHebjfZ68G+
RntD+LK3dyi/deFfSWcXRuu5D9An11V0P+sqPusqPusqPusq3BP+rKv4lXQV
6qG7HR0yUVj/iUB6tuSJWKGLKHnqAQAOQ9cUOLc8xf11jr7ARM1H29tiOm0B
XdsepfCPfjr9olyKqQxCd2p25MMxl8D8Y3Uzv4ES6JPqaXZ7y/Q0h7t35oz+
e+hpajijzY1liL+KM9rc4NP+BBqf/favq/EJCQnwJH2IkC38PrD1HyFkA9Ox
muMP8vusdfkwRP1voPFZysLD3B+EqCU09TRH3RrNUcNTG3E1oJJDyonngDKn
AsrFWgolHq6wDi2f2nHl4KCHcucI8P1grwc4GncHo/7eMAa8Hg3gaA96vV48
2AUM24/jUXu4t9ff3ev22u3Dfn/U2+mQhhNuwyEAfTSE9gM4Y8CBNuBlJ4Zh
YsDanfhw0EGgH3ThLHd3B3hqvW6vO4KrMdjd3+3E3V68v9PfTUYDdBqBQQ6T
/s5+3N5vdw+SUW8A64ZrsdvpHOwOh4RAMNxOFy7PYRsvVXwXpdJBb8WWQYZe
b9MrtgxUd71Nr9gyXIfaTf9jKpVWHBEc0Aq8/I2USitRafkqP0KptA7+wWX6
JPgHb0EQ/z5MqbQnL1Lvs1JpvRfpV3SF6X1WL31WL31WL31WL7kn/Fm99Fm9
9Fm9FJzov4OP0e5SHyO4uHdlwD7rrj6t39L+r+y3FJJKkHx8gFQvAgYc/0dI
9cDbrBYxggKGaLE+CGX/b9dirfKF6h1FT1DuHuXZBH6Eh2EaYznELAey+LF6
q7EZOdGRCx75V9dpASbAoQOKdkeH8aCdJPu9/k4S9+KDvb3BqJvsDg4P28lB
MjwY7KEXXvugPwAMTgDVAVrdPlxPwP5ufDjch3H2ewlAfDDa3dvt9eFadfcB
nQ72AcXjYdJvj9o9QIp+Mmon0CYeHQ72h/v7cAsGve5BF3314KzaQEV6O93+
fn+0O+h0d0ed/Q7g2xBw5aC9023H/faw3Uu6vd1kbxB3hp3dTnd/5/DwDjot
2PSKLQNCrLfpFVuGcdbb9Iotwzi1m/6H1GmtOiKgcyvw8rfRaa1GpeWr/Aid
1jr4B5fpk+AfjBPEvw/Tae3L+0Setnu79D7tH3T5faL/26FX6gCmH8ADABzR
cn3Ami8VPBLL9QFrimvAY618qfZl7cuEFpCa7/RaIdWBMemv/k6fZgAuAvjN
TmcP5tqTlgNp2flVtGA7K7Rgy07SP8fNjY/XU+I5wrl+tJ4SzxFYr5JmZz19
mLffVVqxkARNHzsfozILgdcDLkZlfrS6sYvWnk+gbgTgoj63BlRlWbyc5ApF
ykY7rIn4rHH7rHH7rHH7NBq31Q+Y83yByLziAVtD67beTf+/WldnOIBPCM6P
W6Lw7p2O4kyHcMZhSD50qZ1PcvKVbF1wZN2jNq7JvMnle7704Ck9Hw7yK567
qzr1WLlPDsf/CqXrQXeZ0rXfvbOEAIwPpov4cAkBPc/WsRiGnxc0w97FYuhL
CLjvdQ0bVQILhHcdGaFGQgA24tOoaVFn8muqaUOCNvT+EEWVyMwgxX2EogpN
xyul5qDMzKrSD0NyRnGY+yPEYOC8P0IM3tz4MCRnFAd0+yAkZxSHK/5BSF6v
1t0RtS5qWU8TzTL4K2p58edhaaLfXum7jw4oQ4Dg/t5h57AfownkoLe3O4oR
9u3d5HB3sA/dDobdw/hwZzjYTQ7gFOB2DXsxDNP9/9u7tt62jSz8bsD/gcA+
9MX2iqQoSgH2wbFTwEDbpInTPi2KITm0iVCklhc7apL/vt+ZGV5EjUSJcp0L
FCBBJM7t3M/5ZjgixnIIgozIGY2sycQxIVZrCsFb9mTsYazZ1DZdJxxBEKbj
OIEdjDwT6xqPXXTxGL6fTDiMypzQxpPp295kbPkTesvbtQO0wifbdh0fpuRa
fBSOvdmY+zYUGzY7dWazYB/Q1/V6SAYtuxHdQzJhbjsR3UMyospGon9M0LdH
RHREe7uIngn07VWl7as8APTdRf9COhX8BPpHr3nr9O8w0Nc5gr4HgL5BC/S1
THv0nMCvcwR+j8DvEfg9Ar9H4PcI/B6B3yPwqwN+15KS7w/8rXjT+WUJmuSF
Sf7q7u9ose6tjphxd1lPixmPt2LG470LjCNm3FdibCgw6LRkB1QbjBvbxIh/
FDfW1OooP4ZgXarsPj05BOsC6/sLb23ZrXDjQYp+xI2HKLpUcypY9Oix88JY
BYRvBSB84NvuQd39Wd9u5z4dqnQs2yExQ2lnM9MKp+YU0jdtD0rCAk7bHTMr
HM/MyXjMXXBs7AcWzMoN/ClxbGZjCNIz1w0mdsB8i5s2lGjkjhnzXcf1YSXm
iE89yw9txmeh73ls7LPQt4IRpvNnjI8nnj9zbazHHznQEnPETN+beKE5wmSw
LWZB72EbluP4PixxCuOwXRbaAZ/a3ZOf20BhEN1DMr1quBPRPSSLE8W7EN1D
MkEem4j+IUHhPhHRvZrbRfQ8oHC/Km1f5QGg8C76RxjXU+ifRW+3aPTvCArr
QhlWbtkqkBwMCo9maqtzpLY6zTpcVaENXmYlfI2OQPARCD4CwUcgWDfrEQg+
AsEdCGn1x9j/bUwbLKkXDkbWvzV8fV0gcBgMvBls2wiZt8Ly1wW+9dCnWUGf
5jd57vU7gL27MOvoEJh1q6i/Bszqbr0PgfEfHmZdSdkPh1l3SNo1KftTHMj9
h+9N0NW7pyeD8CJVutIvtgzHi05PdihetaWrBFaHqfZ3BaxqqtHhwCopNuYe
rtorUOrkhXH7mBo35I/zTcioJXOu/Ju5EdS1CQ5hbmAzPzTtUWBOzKkJesHR
0HIdMHM6c0ee6/kOm9h+wJwJn80s8AeiZDazxQ24U98jX2GZJqQLA/GcmQ+b
sizfE8i0CzUx8S/zTeaMwV0+s2YQl++bs4k1tUIox9SekNkw8TOyLqYZ26GD
GT3OuT1xOdmqbVojKOWUMxZg1hlzfTx0zamzz+0JILqHZHjs3YjuIZleTtiJ
6B6ST082E/1DYqZ9IoLS9ujl82Cm/aq0fZWH/MzMDvoHBXwS/aP7CnX6d9jP
zIjbfWbB+u0+M3uKD/j+6W4EDaeWQ/eyjGC5kIsYfSh2ivVsi1bO1LY2ztIu
45EuaEbpWwc3GTWyfMtScZHuvpwhqtvTiaCT5pPzVyWvv1OEJDxLxUhIXUXJ
AaPR7vRKxLWtZ/wJnb3uOO1o2lPccSoksKJn4MeBKL3UELred5imrerZ6clQ
TftW7lfdLLNh96uuy0zxEsnIk+DytHl6kMyUxOiilCEyO17uOhBo3oB9Nqwr
suU5ZwJ9MZ2zDRmHAFr2CjunJ/vuSfTi1S28tQZy0jDMOQVmpweufQqtacbY
Fbins0Z721oPI5pVDAXw27x4NiC/+rMZ0O+ytx/Yr/580T/672ZV2KLQG+gT
v4W7d9z5UZT64LTvKyt1b2Davvp/Qqmh0vZ4kFLrSq7vZ4ere6v0Pik/XQu7
CRbbJ+WnTHQ7yLae8vdsMPTG0drl7FXUiGtV1yjcCg4c7FIGbHY1XXu3+Uzd
Pl+tLFo4QbfQJ2Cn9SOw09qfnV1r/ebetPm2f23PmphbduhmI4STvSEiunP8
AIiIDoZsKwOfOldvF4Fiw2rPMrD3B0A0ZaAOIiLEZ0+QqOVN6XqHwSARSvTd
QaIneE1jdVv46XcTdUiwuJV7/50UBepCpQ/YSaE7PHphXS2oS0ZIG95DzFAa
IZ1oHo7U0iX8Q8xQKj/oHmSGcpaVG+D3TnrpTuchZijN5vRkmBk2W/WDkV9x
GdQeZqh2P42rC+Oa076E8VZYD2zz078C8c15pr5B0Pj0wpAALQ/+81OS/vSF
et/A1rIAqXCR0l7VA5JjI4z5x8iLueHxe/YQpeIhYlZeZCxKON089BD5tH/6
eI/YbeRFhEwY2XD6GCV3xjzNuLFIH3kWlnHVloYoc27AyqPMwIPY8NmCiX3Z
iIbCA+Pd+5vbxp3wxE8D6oknGf9fiXAeNEuC42HGW+5Hi4gOJclpLoyX1fMo
VwMEBsvRNF+gLUL03zQIiiqDnp0RWYUkKkrQ6url67dGHOXFhXF7jyHAknlK
FRgDV5haE4gUpCNm5xHSGKol5DKRFOU8o77coJc9s7l0Z9VKvCWaYdh6AYYf
pzmPl4ZIAdQo6YJLsdFHTMoUdXCXYBse0sDVCuoVcpYLd4wvfHrfNLmT6/BJ
HK0hIQWxkHkKHpcLkbLQ/naRlTntGfKP3C+lE246sYxkQC+ygtmSWbTSmg45
VYsslkBU4kqqRBGe8TvwlWekIgl/bI0uttOpv1ZGBluAJKpJ7pDLgXc84WFU
gGCoBJIukj6UCykP6FcqLCaEzP0sWhQ0YcySuxKpFpSdRP5AoUYYSksVRDAq
HlMjLz0Ud2iB50EEj5MR6p1fGD9HGZ0fIMrrAUnPPhYZn5MU76O7eyPmDzwW
mpWDYJodUkmTeLlduHO2rGRrBKVg03bpkAGEUTZ/JOGIRPKC3gtDbtlZomCr
0NEYms6y2ojO6lQx47TPAwlmLCE9vDCuqhwVTGhUisjNy8UizbAYeS6CCoE4
5rH4gLFQVpxLl9LqRsRBHxR9Uj55GYaRT9YL1ghnAF+i3IVQiZdoA7r9QnKD
aAI/mFQ+LOSRLSWltctQM6ZEIkoLYbcgbCntFPqY3IEDkvGwA3q8IFck7ZbU
KIJ6Z9DzYmXgyhu02kbJQ/pBjIBPxFvIg/ZJiAv3+CemykhMxKGkpZBjw1TS
QylK+vq6qlQujF/JKiWVeU195Z1IvWJhSWUMMS5YQTe+bfdFlW3BdMu4EMsU
zBPuesWFEvXEpTl9qPg2Zw3JoTSeOgzAMGOVsEFhbkKYNQ9ILfISy2FVNxbn
qZxOLmxlxkrjqSpF2FEqn0tjBOGlj4kIDbznLFjVyhVTUKzPq4lYJXJlXa2p
8D3Ul4mg4Ue59G9FVb9RVVZEcy4Yd80X5L8SfyllqizggeWkszXDRYh55HFM
gVj1IDGEZeKLBcbRB05uJYN9gHVKCo2JXhh/IvvFomtNvhdBK6jnPzOiQnhV
qXdSs5rHP+UtDkAD54hS4VJF2zpmktHxQrikpnynmOkzis05LKb1gEbkUhDi
7BMdoBIUK5FL2wvaBAtRYzJS6jn3wbMonxPvM075vFxW1V/IpJktTYQ/S/j5
ndIv4UiVHPC/dEELZ0aWeiXZOs/mUS7Fly/hHOfGY5p9yGv3gMnglYo0lcGp
UTtiI9Fb68jl1S+SoWQXRiEcESR0I4DCQhAGnl7VJ6BvGgSxvQrQw5OcjoaI
wVqeHrS1tmdDhgK/TGK6uREsXIroKgYqiipJEItSbkcuSIXUsMzwNANHQ8Ek
IZ8IVoG4V7K4zVFadKUVgo1XVcZFPoSMoPLo0TyCQ1lR6QvjssMy2UWs7UqN
ema8qac7My4r0Ds/28gw5ROhzCqM5IpIEVhaAQE+GMbJhdNp2QXViSohzbh0
qvUzMXKxJmpUZXxRNEmG1GFiAmQs0+Qqn2nlk6XwGeT9pK1ScKwyD+VjoJQt
r9z2jAvkisLXqKyXBQ+Iq3igIno79b2QSfw1PGjlfWXSCF9H4Z06Gr+yIos+
Iq2PVtoQcoTvNyX3grE5lz4oLyGzDLmV9MKVb2JCHcDFKEEOERurEwiXnp+e
gI6UEiHB+JhF5LBlfptI5yosTiUa0r4vjJrjyKfE0YFCqXJ+X8WCGgnLZfPf
oEzGZ8hBJV34/ypXTk/Oz88/q7+nJ3+IHYG2QX42Pn1qEP78yxca7tXv72/e
vrqGBdAOwO7Nr2Xw6Gn/+s3tzevfLn9BNUVZGAkL8Y9a5mVEB/Y1aF9nItnx
t7To65ykRWuAZub30LKXPKRcX9MXOnjuiaedbo2JvpZgsKZzFzDuDPErKU45
N16KbGSpG2Eum5x7skl36dImLoVli9z/8zoBos05q9t0xvhDnVLSTK4OMHUJ
RwhJ562EjHpS/flX/dVfsk2nY69K17CztOx9NfodhNBynOIVj5qqrW+CrKiU
EYWyEIdTRIKU8CYAyTlaqc3WSZocY8MsKwkAFZenJ5ceBQrNgIwedBh6C515
xdo6v74d1enyRqb5bRo0nVUx0KKgMwyxoYlfmxjQBNRO99dqj7pnDM1Wdsf4
f+aFnnyxb7HKcAqH0mAyst6FlnJ6w6qz2LdlomuZlcn6+HSrCJ0Fpin+ZAjV
P+PLV1Qz64Z4RAvNZO+qw2L6WevDZF2ZPLKFVhL4ft0Se0yxlQvtZIrGhuhy
3ayoHnJ9M1os7/ZlE2W03bp70E0vGQOu5ckFTc/2yYZur3eExW/sQ0h900MX
KpoenVAh6dkYJVp06aKE6P0q8bPlQvD3hi5A03TmdRNxR9rqzOr2tI2duzes
tShNFsz/sLFjKR5XfepOb2+0jbOoGfideCey5ac1HbrvTTa9yTwus7tc14tM
g+FZ07rKQbTaJKtbrTptjMtNb11cljyQIflNFqWi7NPxQ0bkhWrS9F0LxW2T
aUKxaCu8yybxkGPpChSy+SXSmwcEdE7IbUtKyI1RdL4WYJROQuK5BKvasg3h
8VCilXoDyfH8PJTPW4oq8wmdejZZhGj5f3xh1B9hRwIA

-->

</rfc>

